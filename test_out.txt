============================= test session starts ==============================
platform darwin -- Python 3.10.7, pytest-7.2.0, pluggy-1.0.0 -- /Users/cjy/eecs485/p4-mapreduce/env/bin/python3.10
cachedir: .pytest_cache
rootdir: /Users/cjy/eecs485/p4-mapreduce
plugins: mock-3.10.0
collecting ... collected 23 items

tests/test_check_submission_files.py::test_check_submission_files PASSED
tests/test_integration_00.py::test_grep 
-------------------------------- live log setup --------------------------------
INFO     autograder:conftest.py:41 Setup test fixture 'mapreduce_client'
INFO     autograder:conftest.py:58 Starting Manager
INFO     autograder:conftest.py:69 Starting Worker
INFO     autograder:conftest.py:69 Starting Worker
INFO     autograder:conftest.py:69 Starting Worker
PASSED
------------------------------ live log teardown -------------------------------
INFO     autograder:conftest.py:99 Teardown test fixture 'mapreduce_client'

tests/test_integration_01.py::test_wordcount 
-------------------------------- live log setup --------------------------------
INFO     autograder:conftest.py:41 Setup test fixture 'mapreduce_client'
INFO     autograder:conftest.py:58 Starting Manager
INFO     autograder:conftest.py:69 Starting Worker
INFO     autograder:conftest.py:69 Starting Worker
INFO     autograder:conftest.py:69 Starting Worker
PASSED
------------------------------ live log teardown -------------------------------
INFO     autograder:conftest.py:99 Teardown test fixture 'mapreduce_client'

tests/test_integration_02.py::test_many_mappers 
-------------------------------- live log setup --------------------------------
INFO     autograder:conftest.py:41 Setup test fixture 'mapreduce_client'
INFO     autograder:conftest.py:58 Starting Manager
INFO     autograder:conftest.py:69 Starting Worker
INFO     autograder:conftest.py:69 Starting Worker
INFO     autograder:conftest.py:69 Starting Worker
PASSED
------------------------------ live log teardown -------------------------------
INFO     autograder:conftest.py:99 Teardown test fixture 'mapreduce_client'

tests/test_integration_03.py::test_many_mappers 
-------------------------------- live log setup --------------------------------
INFO     autograder:conftest.py:41 Setup test fixture 'mapreduce_client'
INFO     autograder:conftest.py:58 Starting Manager
INFO     autograder:conftest.py:69 Starting Worker
INFO     autograder:conftest.py:69 Starting Worker
INFO     autograder:conftest.py:69 Starting Worker
PASSED
------------------------------ live log teardown -------------------------------
INFO     autograder:conftest.py:99 Teardown test fixture 'mapreduce_client'

tests/test_manager_00.py::test_shutdown 
-------------------------------- live log call ---------------------------------
INFO     mapreduce.manager.__main__:__main__.py:70 Starting manager host=localhost port=6000 pwd=/Users/cjy/eecs485/p4-mapreduce
PASSED
tests/test_manager_00.py::test_shutdown_workers 
-------------------------------- live log call ---------------------------------
INFO     mapreduce.manager.__main__:__main__.py:70 Starting manager host=localhost port=6000 pwd=/Users/cjy/eecs485/p4-mapreduce
PASSED
tests/test_manager_01.py::test_new_job 
-------------------------------- live log call ---------------------------------
INFO     mapreduce.manager.__main__:__main__.py:70 Starting manager host=localhost port=6000 pwd=/Users/cjy/eecs485/p4-mapreduce
INFO     mapreduce.manager.__main__:__main__.py:308 Created tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_new_job0/mapreduce-shared-job00000-285f99p5
INFO     mapreduce.manager.__main__:__main__.py:312 Cleaned up tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_new_job0/mapreduce-shared-job00000-285f99p5
PASSED
tests/test_manager_02.py::test_map 
-------------------------------- live log call ---------------------------------
INFO     mapreduce.manager.__main__:__main__.py:70 Starting manager host=localhost port=6000 pwd=/Users/cjy/eecs485/p4-mapreduce
INFO     mapreduce.manager.__main__:__main__.py:308 Created tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_map0/mapreduce-shared-job00000-xseby62d
INFO     mapreduce.manager.__main__:__main__.py:312 Cleaned up tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_map0/mapreduce-shared-job00000-xseby62d
PASSED
tests/test_manager_03.py::test_finish 
-------------------------------- live log call ---------------------------------
INFO     mapreduce.manager.__main__:__main__.py:70 Starting manager host=localhost port=6000 pwd=/Users/cjy/eecs485/p4-mapreduce
INFO     mapreduce.manager.__main__:__main__.py:308 Created tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_finish0/mapreduce-shared-job00000-mb8nfrdx
INFO     mapreduce.manager.__main__:__main__.py:312 Cleaned up tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_finish0/mapreduce-shared-job00000-mb8nfrdx
PASSED
tests/test_manager_05.py::test_dead_worker 
-------------------------------- live log call ---------------------------------
INFO     mapreduce.manager.__main__:__main__.py:70 Starting manager host=localhost port=6000 pwd=/Users/cjy/eecs485/p4-mapreduce
INFO     mapreduce.manager.__main__:__main__.py:308 Created tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_dead_worker0/mapreduce-shared-job00000-hw7h1gh2
INFO     mapreduce.manager.__main__:__main__.py:312 Cleaned up tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_dead_worker0/mapreduce-shared-job00000-hw7h1gh2
PASSED
tests/test_style.py::test_pycodestyle mapreduce/utils/__init__.py:6:41: E127 continuation line over-indented for visual indent
mapreduce/utils/__init__.py:7:41: E127 continuation line over-indented for visual indent
mapreduce/utils/__init__.py:8:41: E127 continuation line over-indented for visual indent
mapreduce/utils/__init__.py:9:41: E127 continuation line over-indented for visual indent
mapreduce/utils/__main__.py:28:80: E501 line too long (80 > 79 characters)
mapreduce/manager/__main__.py:17:1: E302 expected 2 blank lines, found 1
mapreduce/manager/__main__.py:23:1: E302 expected 2 blank lines, found 1
mapreduce/manager/__main__.py:84:23: E261 at least two spaces before inline comment
mapreduce/manager/__main__.py:85:26: E261 at least two spaces before inline comment
mapreduce/manager/__main__.py:87:24: E261 at least two spaces before inline comment
mapreduce/manager/__main__.py:87:80: E501 line too long (80 > 79 characters)
mapreduce/manager/__main__.py:88:46: E261 at least two spaces before inline comment
mapreduce/manager/__main__.py:91:80: E501 line too long (93 > 79 characters)
mapreduce/manager/__main__.py:105:80: E501 line too long (83 > 79 characters)
mapreduce/manager/__main__.py:106:80: E501 line too long (98 > 79 characters)
mapreduce/manager/__main__.py:114:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:132:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:140:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:146:5: E129 visually indented line with same indent as next logical line
mapreduce/manager/__main__.py:151:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:157:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:163:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:170:80: E501 line too long (97 > 79 characters)
mapreduce/manager/__main__.py:175:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:183:5: E129 visually indented line with same indent as next logical line
mapreduce/manager/__main__.py:190:80: E501 line too long (85 > 79 characters)
mapreduce/manager/__main__.py:201:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:210:80: E501 line too long (80 > 79 characters)
mapreduce/manager/__main__.py:217:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:244:80: E501 line too long (81 > 79 characters)
mapreduce/manager/__main__.py:262:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:272:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:299:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:315:5: E303 too many blank lines (2)
mapreduce/manager/__main__.py:339:5: E303 too many blank lines (2)
mapreduce/worker/__main__.py:54:5: E303 too many blank lines (2)
mapreduce/worker/__main__.py:67:5: E303 too many blank lines (2)
mapreduce/worker/__main__.py:75:80: E501 line too long (95 > 79 characters)
mapreduce/worker/__main__.py:79:5: E303 too many blank lines (2)
mapreduce/worker/__main__.py:95:80: E501 line too long (84 > 79 characters)
mapreduce/worker/__main__.py:97:80: E501 line too long (80 > 79 characters)
mapreduce/worker/__main__.py:99:80: E501 line too long (112 > 79 characters)
mapreduce/worker/__main__.py:100:80: E501 line too long (83 > 79 characters)
mapreduce/worker/__main__.py:105:80: E501 line too long (100 > 79 characters)
mapreduce/worker/__main__.py:106:80: E501 line too long (82 > 79 characters)
mapreduce/worker/__main__.py:110:80: E501 line too long (85 > 79 characters)
mapreduce/worker/__main__.py:114:80: E501 line too long (104 > 79 characters)
mapreduce/worker/__main__.py:125:80: E501 line too long (92 > 79 characters)
mapreduce/worker/__main__.py:129:5: E303 too many blank lines (2)
mapreduce/worker/__main__.py:134:80: E501 line too long (80 > 79 characters)
mapreduce/worker/__main__.py:135:25: E128 continuation line under-indented for visual indent
mapreduce/worker/__main__.py:139:31: E222 multiple spaces after operator
mapreduce/worker/__main__.py:139:80: E501 line too long (83 > 79 characters)
mapreduce/worker/__main__.py:151:80: E501 line too long (94 > 79 characters)
mapreduce/worker/__main__.py:159:80: E501 line too long (89 > 79 characters)
FAILED
tests/test_style.py::test_pydocstyle mapreduce/utils/__main__.py:8 in public function `create_tcp`:
        D202: No blank lines allowed after function docstring (found 1)
mapreduce/utils/__main__.py:8 in public function `create_tcp`:
        D205: 1 blank line required between summary line and description (found 0)
mapreduce/utils/__main__.py:8 in public function `create_tcp`:
        D208: Docstring is over-indented
mapreduce/utils/__main__.py:8 in public function `create_tcp`:
        D209: Multi-line docstring closing quotes should be on a separate line
mapreduce/utils/__main__.py:8 in public function `create_tcp`:
        D400: First line should end with a period (not 't')
mapreduce/manager/__main__.py:18 in public class `Status`:
        D204: 1 blank line required after class docstring (found 0)
mapreduce/manager/__main__.py:24 in public class `WorkerInfo`:
        D204: 1 blank line required after class docstring (found 0)
mapreduce/manager/__main__.py:25 in public method `__init__`:
        D107: Missing docstring in __init__
mapreduce/manager/__main__.py:218 in public method `assign_task`:
        D205: 1 blank line required between summary line and description (found 0)
mapreduce/manager/__main__.py:218 in public method `assign_task`:
        D209: Multi-line docstring closing quotes should be on a separate line
mapreduce/manager/__main__.py:218 in public method `assign_task`:
        D400: First line should end with a period (not ',')
mapreduce/worker/__main__.py:21 in public class `Worker`:
        D204: 1 blank line required after class docstring (found 0)
mapreduce/worker/__main__.py:80 in public method `mapping`:
        D401: First line should be in imperative mood (perhaps 'Map', not 'Mapping')
FAILED
tests/test_style.py::test_pylint ************* Module mapreduce.manager.__main__
mapreduce/manager/__main__.py:61:0: R0902: Too many instance attributes (14/7) (too-many-instance-attributes)
mapreduce/manager/__main__.py:144:16: C0206: Consider iterating with .items() (consider-using-dict-items)
mapreduce/manager/__main__.py:144:30: C0201: Consider iterating the dictionary directly instead of calling .keys() (consider-iterating-dictionary)
mapreduce/manager/__main__.py:168:30: C0201: Consider iterating the dictionary directly instead of calling .keys() (consider-iterating-dictionary)
mapreduce/manager/__main__.py:182:26: C0201: Consider iterating the dictionary directly instead of calling .keys() (consider-iterating-dictionary)
************* Module mapreduce.worker.__main__
mapreduce/worker/__main__.py:99:0: C0301: Line too long (112/100) (line-too-long)
mapreduce/worker/__main__.py:114:0: C0301: Line too long (104/100) (line-too-long)
mapreduce/worker/__main__.py:20:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
mapreduce/worker/__main__.py:79:4: R0914: Too many local variables (21/15) (too-many-locals)

------------------------------------------------------------------
Your code has been rated at 9.79/10 (previous run: 9.84/10, -0.05)

FAILED
tests/test_worker_00.py::test_shutdown 
-------------------------------- live log call ---------------------------------
INFO     mapreduce.worker.__main__:__main__.py:28 Starting worker host=localhost port=6001 pwd=/Users/cjy/eecs485/p4-mapreduce
INFO     mapreduce.worker.__main__:__main__.py:32 manager_host=localhost manager_port=6000
PASSED
tests/test_worker_01.py::test_register 
-------------------------------- live log call ---------------------------------
INFO     mapreduce.worker.__main__:__main__.py:28 Starting worker host=localhost port=6001 pwd=/Users/cjy/eecs485/p4-mapreduce
INFO     mapreduce.worker.__main__:__main__.py:32 manager_host=localhost manager_port=6000
PASSED
tests/test_worker_02.py::test_heartbeat 
-------------------------------- live log call ---------------------------------
INFO     mapreduce.worker.__main__:__main__.py:28 Starting worker host=localhost port=6001 pwd=/Users/cjy/eecs485/p4-mapreduce
INFO     mapreduce.worker.__main__:__main__.py:32 manager_host=localhost manager_port=6000
PASSED
tests/test_worker_03.py::test_finish_task_messages 
-------------------------------- live log call ---------------------------------
INFO     mapreduce.worker.__main__:__main__.py:28 Starting worker host=localhost port=6001 pwd=/Users/cjy/eecs485/p4-mapreduce
INFO     mapreduce.worker.__main__:__main__.py:32 manager_host=localhost manager_port=6000
INFO     mapreduce.worker.__main__:__main__.py:83 Created tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_dead_worker0/mapreduce-local-task00000-9un0ji9m
INFO     mapreduce.worker.__main__:__main__.py:126 Cleaned up tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_dead_worker0/mapreduce-local-task00000-9un0ji9m
PASSED
tests/test_worker_04.py::test_finish_task_output 
-------------------------------- live log call ---------------------------------
INFO     mapreduce.worker.__main__:__main__.py:28 Starting worker host=localhost port=6001 pwd=/Users/cjy/eecs485/p4-mapreduce
INFO     mapreduce.worker.__main__:__main__.py:32 manager_host=localhost manager_port=6000
INFO     mapreduce.worker.__main__:__main__.py:83 Created tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_dead_worker0/mapreduce-local-task00000-j_cawhxh
INFO     mapreduce.worker.__main__:__main__.py:126 Cleaned up tmpdir /private/var/folders/h0/htpjtrh57z53gn45nkqhfp2c0000gn/T/pytest-of-cjy/pytest-7/test_dead_worker0/mapreduce-local-task00000-j_cawhxh


=================================== FAILURES ===================================
_______________________________ test_pycodestyle _______________________________

    def test_pycodestyle():
        """Run pycodestyle."""
        utils.assert_no_prohibited_terms("nopep8", "noqa", "pylint")
>       subprocess.run(["pycodestyle", "mapreduce"], check=True)

tests/test_style.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (['pycodestyle', 'mapreduce'],), kwargs = {}
process = <Popen: returncode: 1 args: ['pycodestyle', 'mapreduce']>
stdout = None, stderr = None, retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '['pycodestyle', 'mapreduce']' returned non-zero exit status 1.

/usr/local/Cellar/python@3.10/3.10.7/Frameworks/Python.framework/Versions/3.10/lib/python3.10/subprocess.py:524: CalledProcessError
_______________________________ test_pydocstyle ________________________________

    def test_pydocstyle():
        """Run pydocstyle."""
        utils.assert_no_prohibited_terms("nopep8", "noqa", "pylint")
>       subprocess.run(["pydocstyle", "mapreduce"], check=True)

tests/test_style.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (['pydocstyle', 'mapreduce'],), kwargs = {}
process = <Popen: returncode: 1 args: ['pydocstyle', 'mapreduce']>
stdout = None, stderr = None, retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '['pydocstyle', 'mapreduce']' returned non-zero exit status 1.

/usr/local/Cellar/python@3.10/3.10.7/Frameworks/Python.framework/Versions/3.10/lib/python3.10/subprocess.py:524: CalledProcessError
_________________________________ test_pylint __________________________________

    def test_pylint():
        """Run pylint."""
        utils.assert_no_prohibited_terms("nopep8", "noqa", "pylint")
>       subprocess.run([
            "pylint",
            "--rcfile", utils.TESTDATA_DIR/"pylintrc",
            "--disable=no-value-for-parameter",
            "--disable=method-hidden",
            "--unsafe-load-any-extension=y",
            "--max-args=6",
            "--min-public-methods=1",
            "mapreduce",
        ], check=True)

tests/test_style.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = False, timeout = None, check = True
popenargs = (['pylint', '--rcfile', PosixPath('/Users/cjy/eecs485/p4-mapreduce/tests/testdata/pylintrc'), '--disable=no-value-for-parameter', '--disable=method-hidden', '--unsafe-load-any-extension=y', ...],)
kwargs = {}
process = <Popen: returncode: 24 args: ['pylint', '--rcfile', PosixPath('/Users/cjy/ee...>
stdout = None, stderr = None, retcode = 24

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '['pylint', '--rcfile', PosixPath('/Users/cjy/eecs485/p4-mapreduce/tests/testdata/pylintrc'), '--disable=no-value-for-parameter', '--disable=method-hidden', '--unsafe-load-any-extension=y', '--max-args=6', '--min-public-methods=1', 'mapreduce']' returned non-zero exit status 24.

/usr/local/Cellar/python@3.10/3.10.7/Frameworks/Python.framework/Versions/3.10/lib/python3.10/subprocess.py:524: CalledProcessError
=============================== warnings summary ===============================
tests/test_manager_00.py::test_shutdown
  /Users/cjy/eecs485/p4-mapreduce/env/lib/python3.10/site-packages/_pytest/threadexception.py:73: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-1 (create_udp)
  
  Traceback (most recent call last):
    File "/usr/local/Cellar/python@3.10/3.10.7/Frameworks/Python.framework/Versions/3.10/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
      self.run()
    File "/usr/local/Cellar/python@3.10/3.10.7/Frameworks/Python.framework/Versions/3.10/lib/python3.10/threading.py", line 953, in run
      self._target(*self._args, **self._kwargs)
    File "/Users/cjy/eecs485/p4-mapreduce/mapreduce/utils/__main__.py", line 104, in create_udp
      self.udp_handler(message_dict)
    File "/Users/cjy/eecs485/p4-mapreduce/mapreduce/manager/__main__.py", line 137, in udp_handler
      self.workers[host, port].birth = time.time()
  KeyError: ('localhost', 3001)
  
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

tests/test_manager_01.py::test_new_job
  /Users/cjy/eecs485/p4-mapreduce/env/lib/python3.10/site-packages/_pytest/threadexception.py:73: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-7 (create_udp)
  
  Traceback (most recent call last):
    File "/usr/local/Cellar/python@3.10/3.10.7/Frameworks/Python.framework/Versions/3.10/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
      self.run()
    File "/usr/local/Cellar/python@3.10/3.10.7/Frameworks/Python.framework/Versions/3.10/lib/python3.10/threading.py", line 953, in run
      self._target(*self._args, **self._kwargs)
    File "/Users/cjy/eecs485/p4-mapreduce/mapreduce/utils/__main__.py", line 104, in create_udp
      self.udp_handler(message_dict)
    File "/Users/cjy/eecs485/p4-mapreduce/mapreduce/manager/__main__.py", line 137, in udp_handler
      self.workers[host, port].birth = time.time()
  KeyError: ('localhost', 3001)
  
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

tests/test_manager_05.py::test_dead_worker
  /Users/cjy/eecs485/p4-mapreduce/env/lib/python3.10/site-packages/_pytest/threadexception.py:73: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-17 (fault_tolerance)
  
  Traceback (most recent call last):
    File "/usr/local/Cellar/python@3.10/3.10.7/Frameworks/Python.framework/Versions/3.10/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
      self.run()
    File "/usr/local/Cellar/python@3.10/3.10.7/Frameworks/Python.framework/Versions/3.10/lib/python3.10/threading.py", line 953, in run
      self._target(*self._args, **self._kwargs)
    File "/Users/cjy/eecs485/p4-mapreduce/mapreduce/manager/__main__.py", line 147, in fault_tolerance
      self.deal_dead_workers(worker)
    File "/Users/cjy/eecs485/p4-mapreduce/mapreduce/manager/__main__.py", line 266, in deal_dead_workers
      self.assign_task(self.workers[worker].taskid)
    File "/Users/cjy/eecs485/p4-mapreduce/mapreduce/manager/__main__.py", line 255, in assign_task
      self.tasks.remove(taskid)
  ValueError: list.remove(x): x not in list
  
    warnings.warn(pytest.PytestUnhandledThreadExceptionWarning(msg))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_style.py::test_pycodestyle - subprocess.CalledProcessError:...
FAILED tests/test_style.py::test_pydocstyle - subprocess.CalledProcessError: ...
FAILED tests/test_style.py::test_pylint - subprocess.CalledProcessError: Comm...
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! KeyboardInterrupt !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
/usr/local/Cellar/python@3.10/3.10.7/Frameworks/Python.framework/Versions/3.10/lib/python3.10/threading.py:1116: KeyboardInterrupt
(to show a full traceback on KeyboardInterrupt use --full-trace)
================== 3 failed, 15 passed, 3 warnings in 58.63s ===================
